##ming sun 90147770

class GameOver(BaseException):
    pass

class InvalidMoveError(BaseException):
    pass

class NoLeagalMoveError(BaseException):
    pass

class game_logic:

    def __init__(self, row_number:int, column_number:int, top_left:str, move_first:str, board:list, sides:list)-> None:
        self._row = int(row_number)
        self._column = int(column_number)
        self._topleft = top_left
        self._none = sides[0]
        self._white = sides[1]
        self._black = sides[2]
        self._turn = move_first
        self._board = board
        
    
    def make_move(self, row, column):

        self._board = self.drop_piece(self._board, row, column, self._turn, self._none)
        self._turn = self.change_turn(self._turn)
        return self._turn

    def win(self):
        if count_pieces(self._board, self._black) ==0 or count_pieces(self._board, self._white)==0:
            raise GameOver()
        elif count_pieces(self._board, self._black)+count_pieces(self._board, self._white) == self._row*self._column:
            raise GameOver()
        
  
    def copy_game_board(slef, board: list, row:int, column:int)->list:
        result = []
        for a in range(int(row)):
            result.append([])
            for b in range(int(column)):
                result[-1].append(board[a][b])
        return result


    
    def check_move(self):
        count = 0
        copy_board = self.copy_game_board(self._board, self._row, self._column)
        for a in range(len(copy_board)):
            for b in range(len(copy_board[a])):
                if copy_board[a][b] == self._none:
                    count += self.check_board(copy_board, a, b, self._turn)
                else:
                    count += 8
            if count < self._row * self._column * 8:
                pass
            else:
                self._turn = self.change_turn(self._turn)
                raise NoLegalMoveError()
            
    def total(self):
        copy_board = self.copy_game_board(self._board, self._row, self._column)
        total_pieces = count_pieces(copy_board, self._black) + count_pieces(copy_board, self._white)
        return total_pieces


    def double_illegal(self):
        count = 0
        copy_board = self.copy_game_board(self._board, self._row, self._column)
        for a in range(len(copy_board)):
            for b in range(len(copy_board[a])):
                if copy_board[a][b] == self._none:
                    count += self.check_board(copy_board, a, b, self._turn)
                else:
                    count += 8
        if count < self._row * self._column * 8:
            return True
        else:
            for a in range(len(copy_board)):
                for b in range(len(copy_board[a])):
                    if copy_board[a][b] == self._none:
                        count += self.check_board(copy_board, a, b, change_turn(self._turn))
                    else:
                        count += 8
            if count < self._row * self._column * 8:
                return True
            else:
                raise GameOverError()

                   

    def change_turn(self, turn: str) -> str:
        if turn == 'W':
            return 'B'
        else:
            return 'W'  




    def drop_piece(self, board: list, row: int, column: int, turn: str, none: str) -> list:
        if board[row - 1][column - 1] == none:
            newboard = self.change_board(board, row-1, column-1, turn)
            return newboard
        else:
            raise InvalidMoveError()
            



    def check_board(self, board: list, row: int, column: int, turn: str) -> bool:
        '''takes a move, returns whether it is valid'''
        result = 0
        try:
            if board[row+1][column] == self.change_turn(turn):
                i = 2
                while True:
                    if board[row+i][column] == self.change_turn(turn):
                        i += 1
                    elif board[row+i][column] == turn:
                        for x in range(i):
                            board[row+x][column] = turn
                        break
                    else:
                        result += 1
                        break
            else:
                result += 1
        except IndexError:
            result += 1
        try:
            if board[row-1][column] == self.change_turn(turn):
                i = 2
                if row - i < 0:
                    raise IndexError
                while True:
                    if board[row-i][column] == self.change_turn(turn):
                        i += 1
                    elif board[row-i][column] == turn:
                        for x in range(i):
                            board[row-x][column] = turn
                        break
                    else:
                        result += 1
                        break
            else:
                result += 1
        except IndexError:
            result += 1
        try:
            if board[row][column+1] == self.change_turn(turn):
                i = 2
                while True:
                    if board[row][column+i] == self.change_turn(turn):
                        i += 1
                    elif board[row][column+i] == turn:
                        for x in range(i):
                            board[row][column+x] = turn
                        break
                    else:
                        result += 1
                        break
            else:
                result += 1
        except IndexError:
            result += 1
        try:
            if board[row][column-1] == self.change_turn(turn):
                i = 2
                if column - i < 0:
                    raise IndexError
                while True:
                    if board[row][column-i] == self.change_turn(turn):
                        i += 1
                    elif board[row][column-i] == turn:
                        for x in range(i):
                            board[row][column-x] = turn
                        break
                    else:
                        result += 1
                        break
            else:
                result += 1
        except IndexError:
            result += 1
        try:
            if board[row+1][column+1] == self.change_turn(turn):
                i = 2
                while True:
                    if board[row+i][column+i] == self.change_turn(turn):
                        i += 1
                    elif board[row+i][column+i] == turn:
                        for x in range(i):
                            board[row+x][column+x] = turn
                        break
                    else:
                        result += 1
                        break
            else:
                result += 1
        except IndexError:
            result += 1
        try:
            if board[row+1][column-1] == self.change_turn(turn):
                i = 2
                if column - i < 0:
                    raise IndexError
                while True:
                    if board[row+i][column-i] == self.change_turn(turn):
                        i += 1
                    elif board[row+i][column-i] == turn:
                        for x in range(i):
                            board[row+x][column-x] = turn
                        break
                    else:
                        result += 1
                        break
            else:
                result += 1
        except IndexError:
            result += 1
        try:
            if board[row-1][column+1] == self.change_turn(turn):
                i = 2
                if row - i < 0:
                    raise IndexError
                while True:
                    if board[row-i][column+i] == self.change_turn(turn):
                        i += 1
                    elif board[row-i][column+i] == turn:
                        for x in range(i):
                            board[row-x][column+x] = turn
                        break
                    else:
                        result += 1
                        break
            else:
                result += 1
        except IndexError:
            result += 1
        try:
            if board[row-1][column-1] == self.change_turn(turn):
                i = 2
                if row - i < 0:
                    raise IndexError
                if column - i < 0:
                    raise IndexError
                while True:
                    if board[row-i][column-i] == self.change_turn(turn):
                        i += 1
                    elif board[row-i][column-i] == turn:
                        for x in range(i):
                            board[row-x][column-x] = turn
                        break
                    else:
                        result += 1
                        break
            else:
                result += 1
        except IndexError:
            result += 1
        return result

    def change_board(self, board: list, row: int, column: int, turn: str) -> bool:
        '''takes a move, returns whether it is valid'''
        result = self.check_board(board, row, column, turn)
        if result >= 8:
            raise InvalidMoveError()
        return board


def full_name(player:str):
    if player == 'W':
        return 'White'
    else:
        return 'Black'

def count_pieces(board: list, color: str) -> int:
    count = 0

    for a in board:
        for b in a:
            if b == color:
                    
                count += 1
    return count

def _gameboard(row: int, column: int, piece:str):
        board = []
        for col in range(int(row)):
            board.append([])
            for row in range(int(column)):
                board[-1].append(piece)
        return board
def turn_determine(move_first: str) -> str:
    if move_first.upper() == 'BLACK':
        print()
        return 'B'
    elif move_first.upper() == 'WHITE':
        print()
        return 'W'
    else:
        new_move_first = input('please enter a valid word.\n')
        return turn_determine(new_move_first)
    
def set_discs(board:list, top_left:str, row: int, column: int ):
    row = int(row)
    column = int(column)

    if top_left == 'black':
        board[int(row/2 - 1)][int(column/2 - 1)] = 'B'
        board[int(row/2)][int(column/2)] = 'B'
        
        board[int(row/2)][int(column/2 - 1)] = 'W'
        board[int(row/2 - 1)][int(column/2)] = 'W'
        return board
    
    elif top_left == 'white':
        board[int(row/2 - 1)][int(column/2 - 1)] = 'W'
        board[int(row/2)][int(column/2)] = 'W'
        board[int(row/2)][int(column/2 - 1)] = 'B'
        board[int(row/2 - 1)][int(column/2)] = 'B'
        return board
